// Generated by CoffeeScript 1.10.0
(function() {
  var GameOfLife;

  GameOfLife = (function() {
    GameOfLife.prototype.height = 800;

    GameOfLife.prototype.width = 800;

    GameOfLife.prototype.size = 10;

    GameOfLife.prototype.nocells = 73;

    GameOfLife.prototype.cells = null;

    GameOfLife.prototype.ticktime = 100;

    GameOfLife.prototype.canvas = null;

    GameOfLife.prototype.ctx = null;

    function GameOfLife() {
      alert("hi");
      this.makeCanvas();
      this.makeDrawingContext();
      this.randomInit();
      this.tick();
    }

    GameOfLife.prototype.makeCanvas = function() {
      this.canvas = document.createElement('canvas');
      document.body.appendChild(this.canvas);
      this.canvas.height = this.nocells * this.size;
      return this.canvas.width = this.nocells * this.size;
    };

    GameOfLife.prototype.makeDrawingContext = function() {
      this.ctx = this.canvas.getContext("2d");
      this.ctx.fillStyle = 'rgb(0,0,255)';
      return this.ctx.fillRect(0, 0, this.width, this.height);
    };

    GameOfLife.prototype.randomInit = function() {
      var A, a, color, k, ref, results, thing, x, y;
      results = [];
      for (x = k = 0, ref = this.nocells; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
        this.cells[x] = [];
        results.push((function() {
          var l, ref1, results1;
          results1 = [];
          for (y = l = 0, ref1 = this.nocells; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
            a = Math.random();
            if (a > 0.5) {
              thing = 'alive';
              color = 'rgb(0,0,100)';
            } else {
              thing = 'dead';
              color = 'rgb(0,0,0)';
            }
            this.ctx.fillStyle = color;
            this.ctx.fillRect(x + x * this.size, y + y * this.size, this.size, this.size);
            A = {
              'state': thing,
              'row': x,
              'column': y,
              'neighbors': 0
            };
            results1.push(this.cells[x][y] = A);
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    GameOfLife.prototype.updateSquare = function() {
      var color, k, ref, results, x, y;
      results = [];
      for (x = k = 0, ref = this.nocells; 0 <= ref ? k < ref : k > ref; x = 0 <= ref ? ++k : --k) {
        results.push((function() {
          var l, ref1, results1;
          results1 = [];
          for (y = l = 0, ref1 = this.nocells; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
            if (this.cells[x][y]['state'] === 'alive') {
              color = 'rgb(0,0,100)';
            } else if (this.cells[x][y]['state'] === 'dead') {
              color = 'rgb(0,0,0)';
            }
            this.ctx.fillStyle = color;
            results1.push(this.ctx.fillRect(x + x * this.size, y + y * this.size, this.size, this.size));
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    GameOfLife.prototype.countLiveNeighbours = function(i, j) {
      var collb, colub, k, l, neighbors, ref, ref1, ref2, ref3, rowlb, rowub, x, y;
      neighbors = 0;
      rowlb = Math.max(j - 1, 0);
      rowub = Math.min(j + 1, this.nocells - 1);
      collb = Math.max(i - 1, 0);
      colub = Math.min(i + 1, this.nocells - 1);
      for (x = k = ref = collb, ref1 = colub; ref <= ref1 ? k <= ref1 : k >= ref1; x = ref <= ref1 ? ++k : --k) {
        for (y = l = ref2 = rowlb, ref3 = rowub; ref2 <= ref3 ? l <= ref3 : l >= ref3; y = ref2 <= ref3 ? ++l : --l) {
          if (!(x === i && y === j)) {
            if (this.cells[x][y]['state'] === 'alive') {
              neighbors++;
            }
          }
        }
      }
      return this.cells[i][j]['neighbors'] = neighbors;
    };

    GameOfLife.prototype.changeState = function() {
      var i, j, k, ref, results;
      results = [];
      for (i = k = 0, ref = this.nocells; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        results.push((function() {
          var l, ref1, results1;
          results1 = [];
          for (j = l = 0, ref1 = this.nocells; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
            if (this.cells[i][j]['state'] === 'alive' && this.cells[i][j]['neighbors'] < 2) {
              this.cells[i][j]['state'] = 'dead';
            }
            if (this.cells[i][j]['state'] === 'alive' && this.cells[i][j]['neighbors'] > 3) {
              this.cells[i][j]['state'] = 'dead';
            }
            if (this.cells[i][j]['state'] === 'dead' && this.cells[i][j]['neighbors'] === 3) {
              results1.push(this.cells[i][j]['state'] = 'alive');
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    GameOfLife.prototype.tick = function() {
      var i, j, k, l, ref, ref1, results;
      results = [];
      for (i = k = 0, ref = this.nocells; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        for (j = l = 0, ref1 = this.nocells; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
          this.countLiveNeighbours(i, j);
        }
        this.changeState();
        this.updateSquare();
        results.push(setTimeout(this.tick, this.ticktime));
      }
      return results;
    };

    GameOfLife.prototype.shout = function() {
      return alert("hi");
    };

    return GameOfLife;

  })();

  window.GameOfLife = GameOfLife;

}).call(this);
